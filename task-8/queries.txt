Common Table Expressions
CTE -> is a temp result set that we can refer to within a SELECT, INSERT, UPDATE or DELETE Statement.
-> temp named result set.
-> exists only during the execution of that query.
-> written using WITH Clause.

Syntax:
WITH CTE_Name AS (
    SELECT ...
)
SELECT * FROM CTE_Name;

Non - Recursive CTE 
-> used to breakdown complex queries into readable blocks

Get departments with average salary > 50000

WITH DepartmentAvg AS (SELECT Department, AVG(Salary) AS AvgSalary FROM Employee GROUP BY Department)
    -> SELECT * FROM DepartmentAvg WHERE AvgSalary > 50000;
+------------+------------+
| Department | AvgSalary  |
+------------+------------+
| Sales      | 63750.0000 |
| IT         | 55000.0000 |
+------------+------------+
2 rows in set (0.00 sec)

Recursive CTE :
-> used to process hierarchial or tree structured data like Organization Charts, Folder/File systems, Categories/Subcategories.

Syntax : 
WITH RECURSIVE cte_name AS (
    -- Anchor (starting point)
    SELECT ...

    UNION ALL

    -- Recursive member (keeps looping)
    SELECT ...
    FROM table
    JOIN cte_name ON ...
)
SELECT * FROM cte_name;

Employee Hierarchy:

CREATE TABLE Employees2 (
    ID INT PRIMARY KEY,
    Name VARCHAR(50),
    ManagerID INT
);

INSERT INTO Employees2 (ID, Name, ManagerID) VALUES
(1, 'CEO', NULL),
(2, 'CTO', 1),
(3, 'CFO', 1),
(4, 'Engineer', 2),
(5, 'Accountant', 3),
(6, 'Intern', 4);

SELECT * FROM Employees2;
+----+------------+-----------+
| ID | Name       | ManagerID |
+----+------------+-----------+
|  1 | CEO        |      NULL |
|  2 | CTO        |         1 |
|  3 | CFO        |         1 |
|  4 | Engineer   |         2 |
|  5 | Accountant |         3 |
|  6 | Intern     |         4 |
+----+------------+-----------+
6 rows in set (0.00 sec)

Recursive CTE to Get Hierarchy : 

WITH RECURSIVE OrgChart AS (
    -- Anchor member (start with top-level)
    SELECT ID, Name, ManagerID, 1 AS Level
    FROM Employees2
    WHERE ManagerID IS NULL

    UNION ALL

    -- Recursive member (get subordinates)
    SELECT e.ID, e.Name, e.ManagerID, oc.Level + 1
    FROM Employees2 e
    JOIN OrgChart oc ON e.ManagerID = oc.ID
)
SELECT * FROM OrgChart
ORDER BY Level, ID;
+------+------------+-----------+-------+
| ID   | Name       | ManagerID | Level |
+------+------------+-----------+-------+
|    1 | CEO        |      NULL |     1 |
|    2 | CTO        |         1 |     2 |
|    3 | CFO        |         1 |     2 |
|    4 | Engineer   |         2 |     3 |
|    5 | Accountant |         3 |     3 |
|    6 | Intern     |         4 |     4 |
+------+------------+-----------+-------+
6 rows in set (0.00 sec)

Infinite Loop Warning
A recursive CTE must terminate naturally, i.e., when there are no more matching rows to recurse.

To add safety:
...
SELECT ...
WHERE Level < 10  -- stops after 10 levels deep

WITH RECURSIVE OrgChart AS (
    SELECT ID, Name, ManagerID, 1 AS Level,
           CONCAT(Name) AS Hierarchy
    FROM Employees2
    WHERE ManagerID IS NULL

    UNION ALL

    SELECT e.ID, e.Name, e.ManagerID, oc.Level + 1,
           CONCAT(oc.Hierarchy,'->',e.Name)
    FROM Employees2 e
    JOIN OrgChart oc ON e.ManagerID = oc.ID
)
SELECT * FROM OrgChart;

+------+------------+-----------+-------+----------------------------+
| ID   | Name       | ManagerID | Level | Hierarchy                  |
+------+------------+-----------+-------+----------------------------+
|    1 | CEO        |      NULL |     1 | CEO                        |
|    2 | CTO        |         1 |     2 | CEO->CTO                   |
|    3 | CFO        |         1 |     2 | CEO->CFO                   |
|    4 | Engineer   |         2 |     3 | CEO->CTO->Engineer         |
|    5 | Accountant |         3 |     3 | CEO->CFO->Accountant       |
|    6 | Intern     |         4 |     4 | CEO->CTO->Engineer->Intern |
+------+------------+-----------+-------+----------------------------+
6 rows in set (0.00 sec)